{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Let\u2019s dive into this exploration of projectile motion and the range as a function of the angle of projection. I\u2019ll structure this response as a Markdown document with embedded Python code to meet your deliverables. We\u2019ll derive the theory, analyze the range, discuss applications, implement a simulation, and reflect on limitations\u2014all while keeping the physics intuitive and engaging. Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Projectile motion describes an object launched into the air, influenced only by gravity (in the idealized case). Let\u2019s derive the equations from Newton\u2019s second law. Deriving the Equations of Motion Consider a projectile launched from the origin \\((x_0, y_0) = (0, 0)\\) with initial velocity \\(v_0\\) at an angle \\(\\theta\\) from the horizontal. Gravity acts downward with acceleration \\(g\\) , typically \\(9.8 \\, \\text{m/s}^2\\) . We break the motion into horizontal ( \\(x\\) ) and vertical ( \\(y\\) ) components. Horizontal motion : No acceleration ( \\(a_x = 0\\) ). Initial velocity: \\(v_{x0} = v_0 \\cos\\theta\\) Equation: \\(x(t) = v_0 \\cos\\theta \\cdot t\\) Vertical motion : Constant acceleration \\(a_y = -g\\) . Initial velocity: \\(v_{y0} = v_0 \\sin\\theta\\) Velocity: \\(v_y(t) = v_{y0} - g t\\) Position: \\(y(t) = v_{y0} t - \\frac{1}{2} g t^2 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) These are the parametric equations of motion. The trajectory is a parabola, as \\(y(x)\\) can be derived by eliminating \\(t\\) : From \\(x = v_0 \\cos\\theta \\cdot t\\) , solve for \\(t = \\frac{x}{v_0 \\cos\\theta}\\) . Substitute into \\(y(t)\\) : \\(y = v_0 \\sin\\theta \\cdot \\frac{x}{v_0 \\cos\\theta} - \\frac{1}{2} g \\left(\\frac{x}{v_0 \\cos\\theta}\\right)^2\\) \\(y = x \\tan\\theta - \\frac{g x^2}{2 v_0^2 \\cos^2\\theta}\\) This is the equation of a parabola, parameterized by \\(v_0\\) , \\(\\theta\\) , and \\(g\\) . Family of Solutions The parameters \\(v_0\\) , \\(\\theta\\) , \\(g\\) , and initial height \\(h\\) (if \\(y_0 \\neq 0\\) ) define a family of trajectories. For instance: - Higher \\(v_0\\) stretches the parabola. - Larger \\(\\theta\\) steepens the initial ascent. - Greater \\(g\\) (e.g., on another planet) compresses the trajectory vertically. 2. Analysis of the Range The range \\(R\\) is the horizontal distance traveled when the projectile returns to \\(y = 0\\) (assuming launch and landing at the same height). Set \\(y(t) = 0\\) : \\(0 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) Factorize: \\(t (v_0 \\sin\\theta - \\frac{1}{2} g t) = 0\\) Solutions: \\(t = 0\\) (launch) or \\(t = \\frac{2 v_0 \\sin\\theta}{g}\\) (landing). Range: \\(R = x(t_{\\text{land}}) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) , using the identity \\(\\sin(2\\theta) = 2 \\sin\\theta \\cos\\theta\\) . Dependence on Angle \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) peaks when \\(\\sin(2\\theta) = 1\\) , i.e., \\(2\\theta = 90^\\circ\\) , so \\(\\theta = 45^\\circ\\) . Range is symmetric: \\(\\theta\\) and \\(90^\\circ - \\theta\\) yield the same \\(R\\) (e.g., \\(30^\\circ\\) and \\(60^\\circ\\) ). At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(R = 0\\) . Other Parameters Initial velocity ( \\(v_0\\) ) : \\(R \\propto v_0^2\\) . Doubling \\(v_0\\) quadruples the range. Gravity ( \\(g\\) ) : \\(R \\propto \\frac{1}{g}\\) . Lower gravity (e.g., on the Moon) increases range. 3. Practical Applications Sports : A soccer ball\u2019s range depends on kick angle and speed, optimized near 45\u00b0 for distance. Engineering : Artillery adjusts \\(\\theta\\) and \\(v_0\\) for target distance, accounting for terrain. Astrophysics : Launching from a height (e.g., a cliff) or on different planets alters \\(R\\) . Air Resistance : In reality, drag reduces range, especially at higher \\(\\theta\\) . 4. Implementation Here\u2019s a Python script to simulate and visualize the range versus angle: import numpy as np import matplotlib.pyplot as plt # Parameters g = 9.8 # m/s^2 v0 = 20 # m/s theta_deg = np.linspace(0, 90, 91) # angles from 0\u00b0 to 90\u00b0 theta_rad = np.radians(theta_deg) # Range function def range_proj(v0, theta, g): return (v0**2 * np.sin(2 * theta)) / g # Compute ranges R = range_proj(v0, theta_rad, g) # Plot plt.figure(figsize=(10, 6)) plt.plot(theta_deg, R, label=f'v0 = {v0} m/s, g = {g} m/s\u00b2') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Range vs. Angle of Projection') plt.grid(True) plt.legend() plt.show() # Test different v0 and g v0_values = [10, 20, 30] g_values = [9.8, 3.7] # Earth, Mars plt.figure(figsize=(10, 6)) for v0 in v0_values: for g in g_values: R = range_proj(v0, theta_rad, g) plt.plot(theta_deg, R, label=f'v0 = {v0} m/s, g = {g} m/s\u00b2') plt.xlabel('Angle (degrees)') plt.ylabel('Range (m)') plt.title('Range vs. Angle for Different v0 and g') plt.grid(True) plt.legend() plt.show() Output Description First Plot : Shows \\(R\\) vs. \\(\\theta\\) for \\(v_0 = 20 \\, \\text{m/s}\\) , \\(g = 9.8 \\, \\text{m/s}^2\\) . Peak range is at 45\u00b0, around 40.8 m. Second Plot : Compares curves for different \\(v_0\\) and \\(g\\) , illustrating quadratic scaling with \\(v_0\\) and inverse scaling with \\(g\\) . Discussion and Limitations Limitations of the Idealized Model Air Resistance : Ignored here, but it reduces range and shifts the optimal angle below 45\u00b0. Height Differences : Assumes \\(y_0 = 0\\) . Launching from a height increases \\(R\\) . Wind : Alters trajectory unpredictably. Curved Earth : For long ranges (e.g., rockets), flat-Earth assumption fails. Extensions Drag : Add a force \\(F_d \\propto -v^2\\) and solve numerically. Height : Modify \\(R = v_0 \\cos\\theta \\cdot t_{\\text{land}}\\) , where \\(t_{\\text{land}}\\) comes from solving \\(y(t) = -h\\) . Wind : Include a velocity term in the equations. This model, while simple, captures the essence of projectile motion and serves as a foundation for more complex scenarios.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"Let\u2019s dive into this exploration of projectile motion and the range as a function of the angle of projection. I\u2019ll structure this response as a Markdown document with embedded Python code to meet your deliverables. We\u2019ll derive the theory, analyze the range, discuss applications, implement a simulation, and reflect on limitations\u2014all while keeping the physics intuitive and engaging.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion describes an object launched into the air, influenced only by gravity (in the idealized case). Let\u2019s derive the equations from Newton\u2019s second law.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deriving-the-equations-of-motion","text":"Consider a projectile launched from the origin \\((x_0, y_0) = (0, 0)\\) with initial velocity \\(v_0\\) at an angle \\(\\theta\\) from the horizontal. Gravity acts downward with acceleration \\(g\\) , typically \\(9.8 \\, \\text{m/s}^2\\) . We break the motion into horizontal ( \\(x\\) ) and vertical ( \\(y\\) ) components. Horizontal motion : No acceleration ( \\(a_x = 0\\) ). Initial velocity: \\(v_{x0} = v_0 \\cos\\theta\\) Equation: \\(x(t) = v_0 \\cos\\theta \\cdot t\\) Vertical motion : Constant acceleration \\(a_y = -g\\) . Initial velocity: \\(v_{y0} = v_0 \\sin\\theta\\) Velocity: \\(v_y(t) = v_{y0} - g t\\) Position: \\(y(t) = v_{y0} t - \\frac{1}{2} g t^2 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) These are the parametric equations of motion. The trajectory is a parabola, as \\(y(x)\\) can be derived by eliminating \\(t\\) : From \\(x = v_0 \\cos\\theta \\cdot t\\) , solve for \\(t = \\frac{x}{v_0 \\cos\\theta}\\) . Substitute into \\(y(t)\\) : \\(y = v_0 \\sin\\theta \\cdot \\frac{x}{v_0 \\cos\\theta} - \\frac{1}{2} g \\left(\\frac{x}{v_0 \\cos\\theta}\\right)^2\\) \\(y = x \\tan\\theta - \\frac{g x^2}{2 v_0^2 \\cos^2\\theta}\\) This is the equation of a parabola, parameterized by \\(v_0\\) , \\(\\theta\\) , and \\(g\\) .","title":"Deriving the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions","text":"The parameters \\(v_0\\) , \\(\\theta\\) , \\(g\\) , and initial height \\(h\\) (if \\(y_0 \\neq 0\\) ) define a family of trajectories. For instance: - Higher \\(v_0\\) stretches the parabola. - Larger \\(\\theta\\) steepens the initial ascent. - Greater \\(g\\) (e.g., on another planet) compresses the trajectory vertically.","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range \\(R\\) is the horizontal distance traveled when the projectile returns to \\(y = 0\\) (assuming launch and landing at the same height). Set \\(y(t) = 0\\) : \\(0 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) Factorize: \\(t (v_0 \\sin\\theta - \\frac{1}{2} g t) = 0\\) Solutions: \\(t = 0\\) (launch) or \\(t = \\frac{2 v_0 \\sin\\theta}{g}\\) (landing). Range: \\(R = x(t_{\\text{land}}) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) , using the identity \\(\\sin(2\\theta) = 2 \\sin\\theta \\cos\\theta\\) .","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#dependence-on-angle","text":"\\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) peaks when \\(\\sin(2\\theta) = 1\\) , i.e., \\(2\\theta = 90^\\circ\\) , so \\(\\theta = 45^\\circ\\) . Range is symmetric: \\(\\theta\\) and \\(90^\\circ - \\theta\\) yield the same \\(R\\) (e.g., \\(30^\\circ\\) and \\(60^\\circ\\) ). At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(R = 0\\) .","title":"Dependence on Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#other-parameters","text":"Initial velocity ( \\(v_0\\) ) : \\(R \\propto v_0^2\\) . Doubling \\(v_0\\) quadruples the range. Gravity ( \\(g\\) ) : \\(R \\propto \\frac{1}{g}\\) . Lower gravity (e.g., on the Moon) increases range.","title":"Other Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports : A soccer ball\u2019s range depends on kick angle and speed, optimized near 45\u00b0 for distance. Engineering : Artillery adjusts \\(\\theta\\) and \\(v_0\\) for target distance, accounting for terrain. Astrophysics : Launching from a height (e.g., a cliff) or on different planets alters \\(R\\) . Air Resistance : In reality, drag reduces range, especially at higher \\(\\theta\\) .","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"Here\u2019s a Python script to simulate and visualize the range versus angle: import numpy as np import matplotlib.pyplot as plt # Parameters g = 9.8 # m/s^2 v0 = 20 # m/s theta_deg = np.linspace(0, 90, 91) # angles from 0\u00b0 to 90\u00b0 theta_rad = np.radians(theta_deg) # Range function def range_proj(v0, theta, g): return (v0**2 * np.sin(2 * theta)) / g # Compute ranges R = range_proj(v0, theta_rad, g) # Plot plt.figure(figsize=(10, 6)) plt.plot(theta_deg, R, label=f'v0 = {v0} m/s, g = {g} m/s\u00b2') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Range vs. Angle of Projection') plt.grid(True) plt.legend() plt.show() # Test different v0 and g v0_values = [10, 20, 30] g_values = [9.8, 3.7] # Earth, Mars plt.figure(figsize=(10, 6)) for v0 in v0_values: for g in g_values: R = range_proj(v0, theta_rad, g) plt.plot(theta_deg, R, label=f'v0 = {v0} m/s, g = {g} m/s\u00b2') plt.xlabel('Angle (degrees)') plt.ylabel('Range (m)') plt.title('Range vs. Angle for Different v0 and g') plt.grid(True) plt.legend() plt.show()","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#output-description","text":"First Plot : Shows \\(R\\) vs. \\(\\theta\\) for \\(v_0 = 20 \\, \\text{m/s}\\) , \\(g = 9.8 \\, \\text{m/s}^2\\) . Peak range is at 45\u00b0, around 40.8 m. Second Plot : Compares curves for different \\(v_0\\) and \\(g\\) , illustrating quadratic scaling with \\(v_0\\) and inverse scaling with \\(g\\) .","title":"Output Description"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#discussion-and-limitations","text":"","title":"Discussion and Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations-of-the-idealized-model","text":"Air Resistance : Ignored here, but it reduces range and shifts the optimal angle below 45\u00b0. Height Differences : Assumes \\(y_0 = 0\\) . Launching from a height increases \\(R\\) . Wind : Alters trajectory unpredictably. Curved Earth : For long ranges (e.g., rockets), flat-Earth assumption fails.","title":"Limitations of the Idealized Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#extensions","text":"Drag : Add a force \\(F_d \\propto -v^2\\) and solve numerically. Height : Modify \\(R = v_0 \\cos\\theta \\cdot t_{\\text{land}}\\) , where \\(t_{\\text{land}}\\) comes from solving \\(y(t) = -h\\) . Wind : Include a velocity term in the equations. This model, while simple, captures the essence of projectile motion and serves as a foundation for more complex scenarios.","title":"Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Investigating the Dynamics of a Forced Damped Pendulum The forced damped pendulum is a rich system where a pendulum\u2019s motion is shaped by damping (friction-like resistance) and an external periodic force. This combination leads to behaviors ranging from simple oscillations to resonance and chaos. Let\u2019s explore its governing equations, analyze its dynamics, and simulate its behavior. 1. Theoretical Foundation Governing Differential Equation The motion is described by a nonlinear second-order differential equation, derived from Newton\u2019s second law for rotational motion: \\[ \\frac{d^2\\theta}{dt^2} + \\frac{b}{m} \\frac{d\\theta}{dt} + \\frac{g}{l} \\sin\\theta = \\frac{F_0}{m l} \\cos(\\omega_d t) \\] Where: \\(\\theta\\) : Angular displacement from vertical (radians) \\(b\\) : Damping coefficient (kg/s) \\(m\\) : Mass of the pendulum bob (kg) \\(l\\) : Length of the pendulum (m) \\(g\\) : Gravitational acceleration (9.8 m/s\u00b2) \\(F_0\\) : Amplitude of the external force (N) \\(\\omega_d\\) : Driving frequency (rad/s) \\(t\\) : Time (s) The terms are: - \\(\\frac{d^2\\theta}{dt^2}\\) : Angular acceleration - \\(\\frac{b}{m} \\frac{d\\theta}{dt}\\) : Damping force per unit mass - \\(\\frac{g}{l} \\sin\\theta\\) : Gravitational restoring force - \\(\\frac{F_0}{m l} \\cos(\\omega_d t)\\) : External driving force Small-Angle Approximation For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin\\theta \\approx \\theta\\) , linearizing the equation: \\[ \\frac{d^2\\theta}{dt^2} + 2\\zeta\\omega_0 \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = \\frac{F_0}{m l} \\cos(\\omega_d t) \\] Where: - \\(\\omega_0 = \\sqrt{\\frac{g}{l}}\\) : Natural frequency - \\(\\zeta = \\frac{b}{2m\\omega_0}\\) : Damping ratio Homogeneous Solution (Unforced Case) Set \\(F_0 = 0\\) : \\[ \\frac{d^2\\theta}{dt^2} + 2\\zeta\\omega_0 \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = 0 \\] Characteristic equation: \\[ r^2 + 2\\zeta\\omega_0 r + \\omega_0^2 = 0 \\] Discriminant: \\(\\Delta = 4\\omega_0^2 (\\zeta^2 - 1)\\) For underdamping: \\((\\zeta < 1)\\) \\[ r = -\\zeta\\omega_0 \\pm i \\omega_0 \\sqrt{1 - \\zeta^2} \\] Solution: \\[ \\theta_h(t) = e^{-\\zeta\\omega_0 t} \\left( C_1 \\cos(\\omega t) + C_2 \\sin(\\omega t) \\right), \\quad \\omega = \\omega_0 \\sqrt{1 - \\zeta^2} \\] This shows decaying oscillations at the damped frequency \\(\\omega\\) . Particular Solution (Forced Case) For the driving term, assume: \\[ \\theta_p(t) = A \\cos(\\omega_d t) + B \\sin(\\omega_d t) \\] Substitute and solve: \\[ A = \\frac{F_0}{m l} \\cdot \\frac{\\omega_0^2 - \\omega_d^2}{(\\omega_0^2 - \\omega_d^2)^2 + (2\\zeta\\omega_0 \\omega_d)^2} \\] \\[ B = \\frac{F_0}{m l} \\cdot \\frac{2\\zeta\\omega_0 \\omega_d}{(\\omega_0^2 - \\omega_d^2)^2 + (2\\zeta\\omega_0 \\omega_d)^2} \\] Amplitude: \\[ D = \\sqrt{A^2 + B^2} = \\frac{F_0 / (m l)}{\\sqrt{(\\omega_0^2 - \\omega_d^2)^2 + (2\\zeta\\omega_0 \\omega_d)^2}} \\] Phase: \\[ \\phi = \\tan^{-1}\\left( \\frac{2\\zeta\\omega_0 \\omega_d}{\\omega_0^2 - \\omega_d^2} \\right) \\] Thus: \\[ \\theta_p(t) = D \\cos(\\omega_d t - \\phi) \\] General solution: \\[ \\theta(t) = e^{-\\zeta\\omega_0 t} \\left( C_1 \\cos(\\omega t) + C_2 \\sin(\\omega t) \\right) + D \\cos(\\omega_d t - \\phi) \\] Resonance Amplitude \\(D\\) maximizes near \\(\\omega_d = \\omega_0\\) . At resonance: \\[ D = \\frac{F_0 / (m l)}{2\\zeta\\omega_0^2} \\] Low \\(\\zeta\\) amplifies oscillations significantly. 2. Analysis of Dynamics Parameter Effects Damping ( \\(b\\) ) : Higher \\(b\\) increases \\(\\zeta\\) , reducing amplitude and transient duration. Driving Amplitude ( \\(F_0\\) ) : Small \\(F_0\\) yields periodic motion; large \\(F_0\\) can induce chaos. Driving Frequency ( \\(\\omega_d\\) ) : Near \\(\\omega_0\\) , resonance occurs; otherwise, complex motion emerges. Nonlinearity and Chaos The \\(\\sin\\theta\\) term makes the system nonlinear. Small \\(F_0\\) produces harmonic motion, but larger \\(F_0\\) leads to period doubling (oscillations repeating over multiple cycles) and eventually chaos \u2014aperiodic, sensitive motion. 3. Practical Applications Energy Harvesting : Oscillatory systems near resonance convert motion to electricity. Engineering : Damping mitigates resonance in structures under periodic forces. Science : Models phenomena like climate cycles or biological oscillators. 4. Numerical Simulation Here\u2019s a Python implementation using scipy.integrate.odeint to simulate the nonlinear equation and visualize its behavior: import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Parameters g = 9.8 # m/s^2 l = 1.0 # m m = 1.0 # kg omega_0 = np.sqrt(g / l) zeta = 0.1 b = 2 * m * zeta * omega_0 omega_d = omega_0 # Resonance T = 2 * np.pi / omega_d # ODE system def pendulum_deriv(state, t, b, m, g, l, F0, omega_d): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -b/m * theta_dot - g/l * np.sin(theta) + F0/(m*l) * np.cos(omega_d * t) return [dtheta_dt, dtheta_dot_dt] # Simulation def simulate(F0, t_max, points_per_period=100): dt = T / points_per_period t = np.arange(0, t_max * T, dt) state0 = [0, 0] sol = odeint(pendulum_deriv, state0, t, args=(b, m, g, l, F0, omega_d)) theta = sol[:, 0] theta_dot = sol[:, 1] theta_mod = np.mod(theta + np.pi, 2 * np.pi) - np.pi return t, theta, theta_dot, theta_mod # Plotting def plot_results(F0, label): t, theta, theta_dot, theta_mod = simulate(F0, 100) plt.figure(figsize=(12, 8)) plt.subplot(2, 2, 1) plt.plot(t[:1000], theta[:1000]) plt.title(f'Time Series (F0={F0} N)') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.subplot(2, 2, 2) plt.plot(theta_mod, theta_dot, '.', ms=1) plt.title('Phase Diagram') plt.xlabel('\u03b8 mod 2\u03c0 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') poincare_idx = np.arange(100, len(t), 100) plt.subplot(2, 2, 3) plt.plot(theta_mod[poincare_idx], theta_dot[poincare_idx], '.', ms=2) plt.title('Poincar\u00e9 Section') plt.xlabel('\u03b8 mod 2\u03c0 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.tight_layout() plt.savefig(f'pendulum_F0_{label}.png') plt.close() # Bifurcation diagram def bifurcation_diagram(F0_range=np.arange(0, 20.1, 0.2)): theta_poincare = [] F0_vals = [] for F0 in F0_range: t, _, theta_dot, theta_mod = simulate(F0, 200) poincare_idx = np.arange(100 * 100, 200 * 100, 100) theta_poincare.extend(theta_mod[poincare_idx]) F0_vals.extend([F0] * len(poincare_idx)) plt.figure(figsize=(10, 6)) plt.plot(F0_vals, theta_poincare, '.', ms=1) plt.title('Bifurcation Diagram') plt.xlabel('Driving Amplitude F0 (N)') plt.ylabel('\u03b8 mod 2\u03c0 (rad)') plt.savefig('bifurcation.png') plt.close() # Run plot_results(1, 'small') plot_results(15, 'chaotic') bifurcation_diagram() Results F0 = 1 N : Time Series : Regular oscillations. Phase Diagram : Closed loops (periodic). Poincar\u00e9 Section : Few points (periodic orbit). F0 = 15 N : Time Series : Irregular motion. Phase Diagram : Dense trajectories. Poincar\u00e9 Section : Scattered points (chaos). Bifurcation Diagram : Shows periodicity, period doubling, and chaos as \\(F_0\\) increases. Small Driving Force (1N) This plot shows the time series, phase diagram, and Poincar\u00e9 section for a small driving force. Large Driving Force (15N) This plot illustrates chaotic behavior under a large driving force. Bifurcation Diagram This diagram displays the transition to chaos as the driving force increases. Discussion The forced damped pendulum transitions from predictable oscillations to chaotic behavior, reflecting the complexity of nonlinear systems. Limitations include the small-angle approximation\u2019s failure at large \\(\\theta\\) and assumptions of linear damping. This analysis and simulation offer a window into dynamics with broad real-world relevance.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"The forced damped pendulum is a rich system where a pendulum\u2019s motion is shaped by damping (friction-like resistance) and an external periodic force. This combination leads to behaviors ranging from simple oscillations to resonance and chaos. Let\u2019s explore its governing equations, analyze its dynamics, and simulate its behavior.","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-differential-equation","text":"The motion is described by a nonlinear second-order differential equation, derived from Newton\u2019s second law for rotational motion: \\[ \\frac{d^2\\theta}{dt^2} + \\frac{b}{m} \\frac{d\\theta}{dt} + \\frac{g}{l} \\sin\\theta = \\frac{F_0}{m l} \\cos(\\omega_d t) \\] Where: \\(\\theta\\) : Angular displacement from vertical (radians) \\(b\\) : Damping coefficient (kg/s) \\(m\\) : Mass of the pendulum bob (kg) \\(l\\) : Length of the pendulum (m) \\(g\\) : Gravitational acceleration (9.8 m/s\u00b2) \\(F_0\\) : Amplitude of the external force (N) \\(\\omega_d\\) : Driving frequency (rad/s) \\(t\\) : Time (s) The terms are: - \\(\\frac{d^2\\theta}{dt^2}\\) : Angular acceleration - \\(\\frac{b}{m} \\frac{d\\theta}{dt}\\) : Damping force per unit mass - \\(\\frac{g}{l} \\sin\\theta\\) : Gravitational restoring force - \\(\\frac{F_0}{m l} \\cos(\\omega_d t)\\) : External driving force","title":"Governing Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin\\theta \\approx \\theta\\) , linearizing the equation: \\[ \\frac{d^2\\theta}{dt^2} + 2\\zeta\\omega_0 \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = \\frac{F_0}{m l} \\cos(\\omega_d t) \\] Where: - \\(\\omega_0 = \\sqrt{\\frac{g}{l}}\\) : Natural frequency - \\(\\zeta = \\frac{b}{2m\\omega_0}\\) : Damping ratio","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#homogeneous-solution-unforced-case","text":"Set \\(F_0 = 0\\) : \\[ \\frac{d^2\\theta}{dt^2} + 2\\zeta\\omega_0 \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = 0 \\] Characteristic equation: \\[ r^2 + 2\\zeta\\omega_0 r + \\omega_0^2 = 0 \\] Discriminant: \\(\\Delta = 4\\omega_0^2 (\\zeta^2 - 1)\\) For underdamping: \\((\\zeta < 1)\\) \\[ r = -\\zeta\\omega_0 \\pm i \\omega_0 \\sqrt{1 - \\zeta^2} \\] Solution: \\[ \\theta_h(t) = e^{-\\zeta\\omega_0 t} \\left( C_1 \\cos(\\omega t) + C_2 \\sin(\\omega t) \\right), \\quad \\omega = \\omega_0 \\sqrt{1 - \\zeta^2} \\] This shows decaying oscillations at the damped frequency \\(\\omega\\) .","title":"Homogeneous Solution (Unforced Case)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#particular-solution-forced-case","text":"For the driving term, assume: \\[ \\theta_p(t) = A \\cos(\\omega_d t) + B \\sin(\\omega_d t) \\] Substitute and solve: \\[ A = \\frac{F_0}{m l} \\cdot \\frac{\\omega_0^2 - \\omega_d^2}{(\\omega_0^2 - \\omega_d^2)^2 + (2\\zeta\\omega_0 \\omega_d)^2} \\] \\[ B = \\frac{F_0}{m l} \\cdot \\frac{2\\zeta\\omega_0 \\omega_d}{(\\omega_0^2 - \\omega_d^2)^2 + (2\\zeta\\omega_0 \\omega_d)^2} \\] Amplitude: \\[ D = \\sqrt{A^2 + B^2} = \\frac{F_0 / (m l)}{\\sqrt{(\\omega_0^2 - \\omega_d^2)^2 + (2\\zeta\\omega_0 \\omega_d)^2}} \\] Phase: \\[ \\phi = \\tan^{-1}\\left( \\frac{2\\zeta\\omega_0 \\omega_d}{\\omega_0^2 - \\omega_d^2} \\right) \\] Thus: \\[ \\theta_p(t) = D \\cos(\\omega_d t - \\phi) \\] General solution: \\[ \\theta(t) = e^{-\\zeta\\omega_0 t} \\left( C_1 \\cos(\\omega t) + C_2 \\sin(\\omega t) \\right) + D \\cos(\\omega_d t - \\phi) \\]","title":"Particular Solution (Forced Case)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"Amplitude \\(D\\) maximizes near \\(\\omega_d = \\omega_0\\) . At resonance: \\[ D = \\frac{F_0 / (m l)}{2\\zeta\\omega_0^2} \\] Low \\(\\zeta\\) amplifies oscillations significantly.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-effects","text":"Damping ( \\(b\\) ) : Higher \\(b\\) increases \\(\\zeta\\) , reducing amplitude and transient duration. Driving Amplitude ( \\(F_0\\) ) : Small \\(F_0\\) yields periodic motion; large \\(F_0\\) can induce chaos. Driving Frequency ( \\(\\omega_d\\) ) : Near \\(\\omega_0\\) , resonance occurs; otherwise, complex motion emerges.","title":"Parameter Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#nonlinearity-and-chaos","text":"The \\(\\sin\\theta\\) term makes the system nonlinear. Small \\(F_0\\) produces harmonic motion, but larger \\(F_0\\) leads to period doubling (oscillations repeating over multiple cycles) and eventually chaos \u2014aperiodic, sensitive motion.","title":"Nonlinearity and Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Energy Harvesting : Oscillatory systems near resonance convert motion to electricity. Engineering : Damping mitigates resonance in structures under periodic forces. Science : Models phenomena like climate cycles or biological oscillators.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-numerical-simulation","text":"Here\u2019s a Python implementation using scipy.integrate.odeint to simulate the nonlinear equation and visualize its behavior: import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Parameters g = 9.8 # m/s^2 l = 1.0 # m m = 1.0 # kg omega_0 = np.sqrt(g / l) zeta = 0.1 b = 2 * m * zeta * omega_0 omega_d = omega_0 # Resonance T = 2 * np.pi / omega_d # ODE system def pendulum_deriv(state, t, b, m, g, l, F0, omega_d): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -b/m * theta_dot - g/l * np.sin(theta) + F0/(m*l) * np.cos(omega_d * t) return [dtheta_dt, dtheta_dot_dt] # Simulation def simulate(F0, t_max, points_per_period=100): dt = T / points_per_period t = np.arange(0, t_max * T, dt) state0 = [0, 0] sol = odeint(pendulum_deriv, state0, t, args=(b, m, g, l, F0, omega_d)) theta = sol[:, 0] theta_dot = sol[:, 1] theta_mod = np.mod(theta + np.pi, 2 * np.pi) - np.pi return t, theta, theta_dot, theta_mod # Plotting def plot_results(F0, label): t, theta, theta_dot, theta_mod = simulate(F0, 100) plt.figure(figsize=(12, 8)) plt.subplot(2, 2, 1) plt.plot(t[:1000], theta[:1000]) plt.title(f'Time Series (F0={F0} N)') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.subplot(2, 2, 2) plt.plot(theta_mod, theta_dot, '.', ms=1) plt.title('Phase Diagram') plt.xlabel('\u03b8 mod 2\u03c0 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') poincare_idx = np.arange(100, len(t), 100) plt.subplot(2, 2, 3) plt.plot(theta_mod[poincare_idx], theta_dot[poincare_idx], '.', ms=2) plt.title('Poincar\u00e9 Section') plt.xlabel('\u03b8 mod 2\u03c0 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.tight_layout() plt.savefig(f'pendulum_F0_{label}.png') plt.close() # Bifurcation diagram def bifurcation_diagram(F0_range=np.arange(0, 20.1, 0.2)): theta_poincare = [] F0_vals = [] for F0 in F0_range: t, _, theta_dot, theta_mod = simulate(F0, 200) poincare_idx = np.arange(100 * 100, 200 * 100, 100) theta_poincare.extend(theta_mod[poincare_idx]) F0_vals.extend([F0] * len(poincare_idx)) plt.figure(figsize=(10, 6)) plt.plot(F0_vals, theta_poincare, '.', ms=1) plt.title('Bifurcation Diagram') plt.xlabel('Driving Amplitude F0 (N)') plt.ylabel('\u03b8 mod 2\u03c0 (rad)') plt.savefig('bifurcation.png') plt.close() # Run plot_results(1, 'small') plot_results(15, 'chaotic') bifurcation_diagram()","title":"4. Numerical Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#results","text":"F0 = 1 N : Time Series : Regular oscillations. Phase Diagram : Closed loops (periodic). Poincar\u00e9 Section : Few points (periodic orbit). F0 = 15 N : Time Series : Irregular motion. Phase Diagram : Dense trajectories. Poincar\u00e9 Section : Scattered points (chaos). Bifurcation Diagram : Shows periodicity, period doubling, and chaos as \\(F_0\\) increases.","title":"Results"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-driving-force-1n","text":"This plot shows the time series, phase diagram, and Poincar\u00e9 section for a small driving force.","title":"Small Driving Force (1N)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#large-driving-force-15n","text":"This plot illustrates chaotic behavior under a large driving force.","title":"Large Driving Force (15N)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#bifurcation-diagram","text":"This diagram displays the transition to chaos as the driving force increases.","title":"Bifurcation Diagram"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#discussion","text":"The forced damped pendulum transitions from predictable oscillations to chaotic behavior, reflecting the complexity of nonlinear systems. Limitations include the small-angle approximation\u2019s failure at large \\(\\theta\\) and assumptions of linear damping. This analysis and simulation offer a window into dynamics with broad real-world relevance.","title":"Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"}]}